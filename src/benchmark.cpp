#include "benchmark.h"
#include "common.h"

using namespace std;

/**
 * Benchmarks the time taken to construct the hash from the reference sequence
 */
void benchmark_construction(genome &g) {

	struct timeval start, end;
	struct timezone tzp;

	    if(loadHashPath.empty()){
	    gettimeofday(&start, &tzp);
        g.construct_hash();
        gettimeofday(&end, &tzp);
        print_time_elapsed("Constructing Hash: ", &start, &end);
    }
    else
    {
    	gettimeofday(&start, &tzp);
	    g.load_hash(loadHashPath);
	    gettimeofday(&end, &tzp);
	    print_time_elapsed("Loading Hash: ", &start, &end);
    }
}

/**
 * Parses the input file which contains the edits to perform on a genome
 * and transforms the required fields into a tuple<strng, string, string>
 *
 * Example input lines:
 * 	I 4439799 T
 * 	S 2261415 C
 * 	D 494753 494753
 *
 * The parsed output generated by this helper function is used by benchmark_edits()
 */
void parse_edit_file(std::vector<std::tuple<std::string, std::string, std::string>> &edits, std::string edits_file_path) {

	std::string g;
	std::ifstream edits_file(edits_file_path);
	
	std::string edit;
	if (edits_file.is_open()) {
		while (!edits_file.eof())
    	{
    		std::getline(edits_file,edit);
    		if(edit.length()>0){
				std::stringstream edit_stream(edit);
				std::string e;
				std::vector<std::string> edit_details;
				while (std::getline(edit_stream, e, ' ')) {
					edit_details.push_back(e);
				}
				edits.push_back(make_tuple(edit_details[0], edit_details[1], edit_details[2]));
    		}
    	}
    } else {
		std::string error_message = "Failed to open file: " + edits_file_path;
		LOGALERT(FILE_LOGGER, error_message);
		LOGALERT(FILE_LOGGER, "Exiting program");
		exit(-1);
	}

	return;
}

/**
 * Benchmarks the time taken to perform all the edits specified in the edits_file
 * to the genome.
 *
 * Edits could refer to Insertions(I), Deletions(D), or Substitutions(S):
 * I 4439799 T
 * S 2261415 C
 * D 494753 494753
 *
 */
void benchmark_edits(genome &g, std::string edits_file, const long number_of_edits) {

	LOGINFO(FILE_LOGGER, "Start: Benchmarking Edits");

	std::vector<std::tuple<std::string, std::string, std::string>> edit;
	parse_edit_file(edit, edits_file);
	LOGINFO(FILE_LOGGER,"Total number of edits to be performed: " + std::to_string(edit.size()));
	long ins_count = 0, del_count = 0, snp_count = 0;

	struct timeval start, end;
	struct timezone tzp;

	//TODO: Fix corner cases and remove
	long total_edits = edit.size();
	//only if the number of edits has been specified
	if (number_of_edits > 0) {
		total_edits = number_of_edits;
	}
	std::vector<long> invalid_deletes;
	long edit_index = 0;

	gettimeofday(&start, &tzp);

	for (auto it : edit) {

		if (total_edits > 0) {

			if (get<0>(it) == "I") {
				g.insert_at(get<2>(it),stol(get<1>(it),nullptr,10));
				ins_count++;
			}

			else if (get<0>(it) == "D") {
				//TODO: Fix corner cases and remove
				if (!g.delete_at(stol(get<1>(it),nullptr,10), stol(get<2>(it),nullptr,10) - stol(get<1>(it),nullptr,10) + 1)) {
					invalid_deletes.push_back(edit_index);
					total_edits++;
				}
				del_count++;
			}

			else if (get<0>(it) == "S") {
				g.snp_at(stol(get<1>(it),nullptr,10), get<2>(it));
				snp_count++;
			}
			total_edits--;
		}
		edit_index++;

		LOGDEBUG(FILE_LOGGER, "FOR 1% TOTAL UPDATES");
		if (edit_index == total_edits / 100) {
			gettimeofday(&end, &tzp);
			print_time_elapsed("0.01% Updates: ", &start, &end);
		}
		if (edit_index == total_edits / 10) {
			gettimeofday(&end, &tzp);

			print_time_elapsed("0.1% Updates: ", &start, &end);
		}
		if (edit_index == total_edits / 2) {
			gettimeofday(&end, &tzp);
			print_time_elapsed("0.5% Updates: ", &start, &end);
		}
		if (edit_index >= total_edits ) {
			gettimeofday(&end, &tzp);
			print_time_elapsed("1% Updates: ", &start, &end);
		}
		//if (edit_index >= total_edits) {
		//	gettimeofday(&end, &tzp);
		//	print_time_elapsed("5% Updates: ", &start, &end);
		//	break;
		//}
	}

	gettimeofday(&end, &tzp);

	print_time_elapsed("Edits: ", &start, &end);

	LOGINFO(FILE_LOGGER, "Total Insertions: " + std::to_string(ins_count));
	LOGINFO(FILE_LOGGER, "Total Deletions: " + std::to_string(del_count));
	LOGINFO(FILE_LOGGER, "Total SNPs: " + std::to_string(snp_count));

	//TODO: Remove after deletion corner case is fixed
	//Store every invalid delete in a file
	LOGINFO(FILE_LOGGER, "Number of invalid deletes= "+ to_string(invalid_deletes.size()));;
	std::ofstream invalid_deletes_file("/mnt/scratch2/nirm/invalid_deletes");
	//LOGINFO(FILE_LOGGER, "Number of invalid deletes= "+ to_string(invalid_deletes.size()));;
	for (auto invalid_delete : invalid_deletes)
		invalid_deletes_file << invalid_delete << "\n";
	invalid_deletes_file.close();

	LOGINFO(FILE_LOGGER, "End: Benchmarking Edits");

}

/**
 * Parses the input file which contains the edits to perform on a genome,
 * followed by search queries, and transforms the required fields into a
 * tuple<strng, string, string>
 *
 * A typical input file would consist of sets of edits and search queries -
 * a few lines of edits, followed by a few search strings, and so on.
 * Example input lines:
 * I 442077 ATC
 * D 3975001 3975005
 * I 2052837 GCG
 * Q GCGCCAGCGTCGGCAAGGGT N 1
 * Q TGTTAACGCGCTGGCGGCGA N 1
 * Q TTCCACGCCTTACACCGTAC N 1
 *
 * The parsed output generated by this helper function is used by benchmark_search()
 *
 */
void parse_query_file(const std::string edits_queries_file_path,
		std::vector<std::tuple<std::string, std::string, std::string>> &edits,
		std::vector<std::tuple<std::string, std::string, std::string, long>> &queries,
		long queryFrequency, long queryCount, long iterations) {

	std::ifstream edits_queries_file(edits_queries_file_path);

	long line_number = 1;

	if (edits_queries_file.is_open()) {

		for (int j = 0; j < iterations; j++) {

			std::string g;

			for (int i = 0; i < queryFrequency; i++) {

				std::getline(edits_queries_file, g);
				std::stringstream edit_stream(g);
				if (g.length() > 0) {
					std::string e;
					std::vector<std::string> edit_details;
					while (std::getline(edit_stream, e, ' ')) {
						edit_details.push_back(e);
					}
					edits.push_back(make_tuple(edit_details[0], edit_details[1], edit_details[2]));
				}


				line_number++;
			}
			LOGDEBUG(FILE_LOGGER, "E " + std::to_string(line_number));

			for (int i = 0; i < queryCount; i++) {

				std::getline(edits_queries_file, g);
				std::stringstream query_stream(g);
				if (g.length() > 0) {
					std::string q;
					std::vector<std::string> query_details;
					while (std::getline(query_stream, q, ' ')) {
						query_details.push_back(q);
					}
					queries.push_back(make_tuple(query_details[0], query_details[1], query_details[2], stol(query_details[3], nullptr, 10)));
				}
				line_number++;
			}
			LOGDEBUG(FILE_LOGGER, "Q " + std::to_string(line_number));
		}

	}  else {
		std::string error_message = "Failed to open file: " + edits_queries_file_path;
		LOGALERT(FILE_LOGGER, error_message);
		LOGALERT(FILE_LOGGER, "Exiting program");
		exit(-1);
	}
}


/**
 * Benchmarks the time taken to search for a set of query strings
 * after a certain set of updates have been performed on the genome.
 *
 * The benchmark is performed iteratively, where in each iteration,
 * "queryFrequency" number of edits are made to the genome, and
 * "queryCount" number of queries are performed on the genome.
 *
 */
void benchmark_search(genome &g, const std::string path_to_query_file, long queryFrequency, long queryCount, long iterations) {

	LOGINFO(FILE_LOGGER, "Start: Benchmarking Search");

	std::vector<std::tuple<std::string, std::string, std::string>> edit;
	std::vector<std::tuple<std::string, std::string, std::string, long>> query;

	parse_query_file(path_to_query_file, edit, query, queryFrequency, queryCount, iterations);

	std::string resultsFile = resultsPath + ".query.out";
	std::ofstream query_out_file(resultsFile);
	LOGINFO(FILE_LOGGER, "Queries output file: "+resultsFile);

	for (int j = 0; j < iterations; j++) {

		long c = j * queryFrequency;
		for (int i = 0; i < queryFrequency; i++) {
			if (get<0>(edit[i + c]) == "I") {
				g.insert_at(get<2>(edit[i + c]),
						stol(get<1>(edit[i + c]), nullptr, 10));
			} else if (get<0>(edit[i + c]) == "D") {
				g.delete_at(stol(get<1>(edit[i + c]), nullptr, 10),
						stol(get<2>(edit[i + c]), nullptr, 10)
								- stol(get<1>(edit[i + c]), nullptr, 10) + 1);
			}
		}

		struct timeval start, end;
		struct timezone tzp;

		gettimeofday(&start, &tzp);
		for (int i = 0; i < queryCount; i++) {
			long c = j * queryCount;
			std::string read = get<1>(query[i + c]);
			std::vector<long> positions = g.search(read);
			query_out_file << read << "\t";
			for (long p : positions) {
				query_out_file << p << " ";
			}
			query_out_file << std::endl;
		}

		gettimeofday(&end, &tzp);
		std::string message = "Search Iteration " + std::to_string(j);
		print_time_elapsed(message, &start, &end);

	}



	LOGINFO(FILE_LOGGER, "Complete: Benchmarking Search");
}

/**
 * Benchmarks the time taken to extract substrings of random lengths
 * from random positions on the genome.
 *
 * A typical substring input file would look like the following:
 *
 * POSITION, SUBSTR_LENGTH
 * 4015907,46
 * 1197216,4
 * 4192204,20
 * 3940536,38
 * 3887129,39
 *
 */
void benchmark_substring(genome &g, std::string substr_file_path, std::string edits_file_path, long num_edits) {

	LOGINFO(FILE_LOGGER, "Editing the genome before extracting substrings");
	benchmark_edits(g, edits_file_path, num_edits);

	LOGINFO(FILE_LOGGER, "Starting: Benchmarking Substring Extraction");

	std::vector<std::pair<long, long>> substrings;
	std::ifstream substr_file(substr_file_path);
	std::string line, pos, len;

	std::string resultsFile = resultsPath + ".substr.out";
	std::ofstream substr_out_file(resultsFile);
	LOGINFO(FILE_LOGGER, "Substrings output file: " + resultsFile);

	if (substr_file.is_open()) {
		while (!substr_file.eof())
    	{
    		std::getline(substr_file,line);
    		if(line.length()>0){
				std::stringstream stream(line);
				std::string l;
				std::vector<std::string> substr_details;
				while (std::getline(stream, l, ',')) {
					substr_details.push_back(l);
				}
				substrings.push_back(
						std::make_pair(stol(substr_details[0], nullptr, 10),
								stol(substr_details[1], nullptr, 10)));
    		}
    	}
	} else {
		std::string error_message = "Failed to open file: " + substr_file_path;
		LOGALERT(FILE_LOGGER, error_message);
		LOGALERT(FILE_LOGGER, "Exiting program");
		exit(-1);
	}

	struct timeval start, end;
	struct timezone tzp;
	long temp;
	gettimeofday(&start, &tzp);

	for (auto substr : substrings) {
		std::string substring = g.read_reference_abs_at(substr.first, substr.second, temp);
		substr_out_file << substr.first << "\t" << substr.second << "\t" << substring << std::endl;
	}

	gettimeofday(&end, &tzp);

	std::string message = "Extracted " + std::to_string(substrings.size())
			+ " substrings: ";
	print_time_elapsed(message, &start, &end);

	LOGINFO(FILE_LOGGER, "Complete: Benchmarking Substring Extraction");

}
